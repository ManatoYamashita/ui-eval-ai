---
alwaysApply: true
---
# general.mdc

## ルール運用の基本方針

### 自律的なルール参照
- 新しいタスクを開始する際は、必ず関連するルールファイルを確認する
- 不明な点がある場合は、既存ルールを参照してから質問する
- ルールが存在しない領域での作業時は、新しいルール作成を検討する

### 知見蓄積のサイクル
- 問題解決時に得られた知見は必ず(.cursor/rules/)にルールとして文書化する
- 同じ問題の再発防止のため、適切なルールファイルに反映する
- 回答の最後で「今回の知見とルール更新提案」を必ず記載する
- ruleファイルを作成したgeneral.mdc(このファイル)の`## ルールファイルの全体像`に追記する。
- general.mdcは基本的に`## ルールファイルの全体像` 以外は編集しない

## ルールファイル管理ガイドライン

### 新規ルールファイル作成の判断基準
以下の条件を満たす場合に新しいファイルを作成：
- 既存ファイルが300行を超える場合
- 明確に異なる技術領域・責任範囲の内容の場合
- 独立して管理すべき設定やワークフローの場合

### 既存ファイル追記の判断基準
以下の場合は既存ファイルに追記：
- 関連する既存ルールの補完・拡張の場合
- ファイルサイズが200行未満の場合
- 同一カテゴリ内での細かな追加ルールの場合

### ファイル命名規則
- `{領域名}.mdc` 形式で命名
- 領域名は英語小文字、必要に応じてハイフン区切り
- 例：`frontend.mdc`, `api-design.mdc`, `testing.mdc`

## ルールファイルの全体像

### 現在のルールファイル構成
- `general.mdc` - 一般ルール・運用方針
- `dev.mdc` - UI Evaluation AI プロジェクト固有ルール
- `environment.mdc` - 開発環境設定、ツール設定、依存関係管理
- `ai-development.mdc` - AI開発パートナーとの協力ワークフロー

### 各ルールファイルの責任範囲
- **general.mdc**: プロジェクト全体の方針、ルール運用方法
- **dev.mdc**: UI Evaluation AI プロジェクト固有の開発ルール・品質基準
- **environment.mdc**: 開発環境設定、ツール設定、依存関係管理、Google Cloud設定
- **ai-development.mdc**: AI開発パートナーとの協力ワークフロー、段階的実装手順

## 作業フローの標準化

### タスク開始時のチェックリスト
1. 関連ルールファイルの確認
2. 既存の類似実装・解決例の調査
3. 必要なルール・知見の不足箇所の特定

### タスク完了時のチェックリスト
1. 該当ルールの遵守確認
2. 新しく得られた知見の整理
3. ルール更新・追加の必要性判断
4. 次回同様のタスクで参照すべき情報の文書化

## ルール改善の継続サイクル

### 定期的な見直し
- ルールの実用性・有効性の評価
- 古くなった情報の更新
- 重複・矛盾するルールの統合

### 品質向上のための指標
- 同じ問題の再発頻度
- 新規参加者のオンボーディング効率
- ルール参照の負荷・検索性

## エラーハンドリングとトラブルシューティング

### 問題発生時の対応手順
1. 既存ルールで解決策を検索
2. 類似問題の過去の解決例を確認
3. 新しい解決策を実装・検証
4. 解決策をルールとして定式化
5. 今後の予防策を含めて文書化

### 知見の共有と蓄積
- 解決プロセス全体を記録
- 原因分析と根本的な解決策を明記
- 関連する技術的背景情報も含める