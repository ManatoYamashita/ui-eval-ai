---
alwaysApply: false
---
# UI Evaluation AI - Curosr rules

このドキュメントは、AIデザインフィードバックアプリの開発において、技術スタックの変更や具体的な実装の詳細に左右されず、**常に遵守すべき普遍的なルール**を定めます。これらのルールは、プロジェクトの品質、保守性、スケーラビリティを確保するための指針となります。

---

## 1. 概要 (Overview)

本プロジェクトは、AIを活用し、アップロードされた画像のUI/UX分析に基づいて**権威あるデザインガイドライン（WCAG, Apple HIG, Refactoring UIなど。これらはあとで増える可能性あり）** に準拠したプロフェッショナルな改善提案を提供するウェブアプリケーションを開発します。私たちの目標は、**シンプルでカスタマイズ性が高く、かつ美しいデザインアプローチ**を通じて、ユーザーに最高の価値を提供することです。設計は後から改善できますが、アルゴリズムとコア機能の実装は、ガイドなしではより困難であるため、シンプルさを最優先します。

---

## 2. 技術スタック (Tech Stack)

技術の進化は速いですが、以下の技術選択原則は普遍的に適用されます。

* **フロントエンド**: ユーザーインターフェースは、モダンな開発パラダイム（React、TypeScript）とユーティリティファーストのCSSフレームワーク（TailwindCSS）を採用し、高いパフォーマンスと開発効率を目指します。現在採用しているNext.js 15 (App Router) は、この方針に合致します。
* **データベース**: 堅牢性、スケーラビリティ、そして高度なデータ操作（例：ベクトル検索）に対応できるデータベースソリューションを基盤とします。
* **AIサービス**: コアとなるAI機能は、最新のAIモデルと効率的なAPI連携を通じて実現し、機能性とコスト効率を両立させます。
* **データ検索**: 大量の情報の中から最も関連性の高いデータを効率的に取得するため、高度な検索メカニズム（例：ハイブリッド検索）を常に採用します。

---

## 3. コアシステム (Core System)

アプリケーションの中核となる機能は、以下の普遍的なパイプライン設計原則に従って実装されます。

### AI分析パイプライン

1.  **入力前処理**: ユーザーからの入力データは、常にAI処理に適した形式に前処理・最適化されます。
2.  **要素識別**: AIを用いて、入力データから重要な構成要素や特徴を正確に識別します。
3.  **知識適用**: 識別された情報に基づき、関連する知識ベースから情報を検索・適用し、AIの推論を補強します。
4.  **構造化出力生成**: AIモデルからの出力は、常に明確で構造化された形式であり、後続の処理やユーザーへの表示に適した形にします。
5.  **フィードバック生成**: AIが分析を実行し、具体的な改善提案や関連する情報を含む形で結果を出力します。

---

## 4. TypeScript標準 (TypeScript Standards)

コードの品質、可読性、保守性を確保するため、TypeScriptの使用において以下のルールを厳守します。

* **厳密な型安全性**: TypeScriptのコンパイラオプションは常に**厳密な設定（strict mode）** を有効にし、型関連のエラーを未然に防ぎます。
* **`any` 型の禁止**: 特段の正当な理由がない限り、`any` 型の使用は禁止します。不明な型や動的なデータ構造に対しては、より具体的な型（`unknown`、`Record<string, unknown>`など）や、適切なインターフェース/型エイリアスを定義して対応します。
* **明示的な型定義**: すべての関数、変数、定数には、可能な限り**明示的な型定義**を付与し、コードの意図とデータフローを明確にします。
* **インターフェース/型エイリアスの活用**: アプリケーション内の複雑なデータ構造やAPIの契約（Contract）を明確に定義するため、適切にインターフェースや型エイリアスを使用します。

---

## 5. コーディング標準 (Coding Standards)

開発者が一貫性のある、高品質なコードを書くための標準です。

* **コンポーネント設計**: Reactコンポーネントは、Hooksを活用した**関数コンポーネント**として実装します。単一責任の原則、再利用性、疎結合性を重視し、必要に応じてAtomic Designのようなデザインパターンを適用します。
* **API構造**: APIエンドポイントは、以下の普遍的なパターンに従って構築します。
    1.  **入力検証**: すべてのAPIリクエストは、セキュリティとデータ整合性を確保するため、厳密な入力検証を行います。
    2.  **ロジックの分離**: APIハンドラは、リクエストの受け付けとレスポンスの整形に徹し、ビジネスロジックはサービスレイヤーやヘルパー関数として明確に分離します。
    3.  **構造化されたレスポンス**: APIレスポンスは、成功・失敗に関わらず、予測可能で一貫性のある構造化された形式（例：JSON）とします。
* **エラーハンドリング**: すべての非同期処理には**`try-catch`ブロック**を必ず設け、適切なエラー処理を行います。
    * **ユーザーフレンドリーなメッセージ**: エンドユーザーには、理解しやすく、行動を促すようなエラーメッセージを提供します。
    * **詳細なログ**: デバッグや問題追跡のため、サーバーサイドで詳細なエラー情報（スタックトレースなど）をログに出力します。
    * **適切なHTTPステータスコード**: APIは、エラーの種類に応じて適切なHTTPステータスコード（例: 400 Bad Request, 404 Not Found, 500 Internal Server Error）を返します。

---

## 6. UI/UX標準 (UI/UX Standards)

ユーザーエクスペリエンスの質を確保するための普遍的な指針です。日本のデジタル庁およびVercel社が公開しているデザインシステムを参照し、**シンプルで美しく、かつ高いカスタマイズ性を持つソリューション**を提供します。

* **ユーティリティファースト/コンポーネントベース**: スタイリングには、TailwindCSSのようなユーティリティファーストのアプローチ、または再利用可能なコンポーネントシステムを基本とし、一貫性と効率性を促進します。
* **レスポンシブデザイン**: すべてのUIは、モバイルからデスクトップまで多様なデバイスと画面サイズに対応する**モバイルファーストのレスポンシブデザイン**を基本とします。
* **ローディング状態の明示**: データフェッチや長時間かかる処理には、ユーザーがシステムの応答を待っていることを明確に伝えるための**ローディング状態**（スピナー、プログレスバーなど）を必ず表示します。

---

## 7. アクセシビリティ標準 (Accessibility Standards)

すべてのユーザーがアプリケーションを快適に利用できるよう、アクセシビリティを最優先事項とし、WCAGなどの国際的なガイドラインに準拠します。

* **セマンティックHTMLとARIAラベル**: スクリーンリーダーを含む支援技術の利用者がアプリケーションを正しく理解できるよう、**セマンティックなHTML要素**を適切に使用し、必要に応じて**ARIAラベル**を付与します。
* **十分なタッチターゲットサイズ**: クリック可能またはタップ可能な要素（ボタン、リンクなど）は、誤操作を防ぎ、モバイルデバイスでの操作性を向上させるために**十分なタッチターゲットサイズ**を確保します（推奨44px × 44px以上）。
* **適切なコントラスト比**: テキストと背景色のコントラスト比は、弱視のユーザーでも読みやすいよう、WCAGの基準（例: 通常テキスト 4.5:1、大きなテキスト 3:1）に厳密に準拠します。
* **キーボードナビゲーションのサポート**: マウスを使用しないユーザー（キーボード操作のみのユーザーや支援技術利用者）がアプリケーションのすべてのインタラクティブ要素を操作できるよう、**完全なキーボードナビゲーション**をサポートします。フォーカス管理も適切に行います。

---

## 8. 開発ワークフロー (Development Workflow)

効率的かつ高品質な開発を継続するための普遍的なワークフローです。

* **コード品質の確保**:
    * **静的解析ツール**: ESLint、Prettierなどのコード品質ツールを導入し、CI/CDパイプラインに組み込むことで、コードの一貫性と品質を自動的に保証します。
    * **静的型チェック**: TypeScriptの厳密モードを常に有効にし、コンパイル時の型エラーをなくします。
    * **適切なロギング**: デバッグ、監視、および問題追跡のために、アプリケーション全体で意味のある、構造化されたロギングを実装します。
* **テストの実施**:
    * **単体テスト**: 個々の関数、コンポーネント、モジュールが期待通りに動作することを検証するため、網羅的な単体テストを記述します。
    * **結合テスト**: 複数のモジュールやシステム間の連携が正しく機能することを確認するため、重要なフローに対して結合テストを記述します。
* **環境変数の管理**: APIキー、データベース接続情報、その他の機密データは、**すべて環境変数を通じて管理**し、決してコードベースに直接ハードコードしません。

---

## 9. ドキュメンテーション管理 (Documentation Management)

プロジェクトの知識を維持し、チーム内での共有と引き継ぎを促進するための普遍的なドキュメント管理ルールです。

* **マスター参照ドキュメント**: プロジェクトの主要な仕様、設計原則、および実装ガイドラインは、**`/app/docs/dev.md`を唯一の信頼できる情報源（Single Source of Truth）** とします。機能実装の前に必ずこのドキュメントを参照し、必要に応じて自身の作業中に得られた知見を追記・修正します。
* **最新情報の参照**: 開発中に最新の動的な情報、深い背景知識、またはプロジェクトの現状に関するリアルタイムな洞察が必要な場合は、`use context7`を使用して**Context7 MCP**を参照してください。これは、`dev.md`に加えて、よりタイムリーな情報を提供する補完的な情報源として活用します。
* **ドキュメント更新の原則**: 新しい機能の実装、既存機能の変更、または新たな知見（最適化、ベストプラクティス、問題解決など）が発見された場合は、**関連するドキュメントを速やかに更新**します。これは、チーム全体の知識ベースを常に最新の状態に保つために不可欠です。
* **コードコメントとJSDoc**: すべての公開関数や複雑なビジネスロジックには、**適切なコードコメントやJSDoc**を付与し、コードの意図、機能、使用方法を明確にします。
* **READMEの充実**: プロジェクトのREADMEファイルには、以下の基本情報を含めます。
    * プロジェクトの目的と概要
    * 開発環境のセットアップ手順
    * 主要なAPIのエンドポイントと基本的な使用例
    * 必要な環境変数のリストと説明
    * デプロイ手順の概要

提案の最後に、何を行なったかのまとめと、次に行うべきことを示してください。

---

## その他

これらの普遍的な開発ルールを理解した上で、次に具体的に以下のタスクに取り組みましょう。

**不明点の質問**: 開発を進める中で疑問や不明な点があれば、些細なことでも遠慮なく質問してください。OJTメンターとして、私がサポートします。

共に高品質なアプリケーションを開発していきましょう！