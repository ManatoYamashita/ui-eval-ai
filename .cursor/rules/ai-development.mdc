---
alwaysApply: false
description:AIアシスタントとの協力開発における段階的な確認と品質チェックのためのガイドライン。リファレンスドキュメントを参照し、具体的な指示を与えることで効率的な開発を実現する
---
# ai-development.mdc

## AI開発パートナーとの協力ワークフロー

### 基本原則
- AIアシスタントとの協力開発では、**段階的な確認を繰り返す**
- **リファレンスドキュメントを常に参照する**
- **具体的で明確な指示を与える**

### 開発セッション開始前の準備

#### 環境準備チェックリスト
```bash
□ Node.js (v18以上) インストール済み
□ VSCode または好みのエディタ準備完了
□ Git リポジトリ作成済み
□ 必要なAPIキー取得済み
□ リファレンスドキュメント手元に準備
```

#### 新しいAIセッション開始時の定型プロンプト
```
以下のプロジェクトの開発を一緒に進めます。
まず添付のリファレンスドキュメントを確認し、理解したことを簡潔に要約してください。

【プロジェクト】
[プロジェクト名・概要]

【現在の状況】
[現在のフェーズ・状況]

【今回の目標】
[今回のセッションで達成したい目標]

理解確認後、具体的な実装手順を提案してください。
```

## 段階的実装の指示方法

### 大きな機能の分割
```
❌ 悪い例: 「AIの分析機能を作ってください」
✅ 良い例: 「Claude 3.5 Haiku APIを使って、画像からUI要素を識別する
identifyDesignElements関数を作成してください。
返り値はElementAnalysis型で、リファレンスドキュメントの
型定義に従ってください」
```

### 段階的な確認プロセス
1. **小さな単位での実装**
   - 「FileUploadコンポーネントの基本版を作成してください」
   - 動作確認
   - 「画像プレビュー機能を追加してください」
   - 動作確認
   - 「バリデーション機能を追加してください」

2. **各段階での品質確認**
   - TypeScriptエラーの確認
   - 動作テストの実行
   - コード品質の確認

## 品質チェックの進め方

### コード品質確認の指示
```
作成されたコードをリファレンスドキュメントの品質基準と照らし合わせて確認してください：
- TypeScript型安全性
- エラーハンドリングの完全性
- セキュリティ考慮事項
- パフォーマンス最適化

問題があれば修正案を提案してください。
```

### 機能動作確認の指示
```
実装した機能のテストケースを作成してください。
以下の観点でテストシナリオを提案してください：
- 正常系の動作確認
- エラーケースの処理
- エッジケースの対応
- ユーザビリティ確認
```

## 問題発生時の対処法

### エラー発生時の報告方法
エラーが発生した場合は以下を含めて報告：
- **正確なエラーメッセージ**
- **実行したコマンドまたは操作**
- **実行環境**（OS、Node.jsバージョン等）
- **期待していた動作**

### エラー発生時の指示例
```
以下のエラーが発生しました：
[エラーメッセージを貼り付け]

リファレンスドキュメントのトラブルシューティングセクションを参考に、
原因の特定と解決策を提案してください。
```

### 仕様の曖昧さ発覚時の対処
```
[具体的な曖昧な点] について、
リファレンスドキュメントに明確な記載がありません。
業界ベストプラクティスに基づいて実装案を提案し、
ドキュメントの更新も含めて提案してください。
```

## セッション終了時の手順

### 進捗記録の指示
```
今回のセッションで実装した内容をまとめてください：
- 完了した機能
- 残っている課題
- 学んだ知見
- 次回セッションで取り組むべき項目

リファレンスドキュメントの開発ログセクションに追記する形式で出力してください。
```

### ドキュメント更新の指示
```
今回の実装で判明した追加情報や変更点を
リファレンスドキュメントに反映してください。
特に以下の観点で更新をお願いします：
- 実装時に発見した最適化ポイント
- エラー対処法の追加
- より良い実装パターンの発見
```

## 完了基準の設定

### フェーズ完了確認の指示例
```
以下を確認して、Phase 1完了を確認してください：
□ Next.jsプロジェクトが正常に起動する
□ 基本的なFileUploadコンポーネントが表示される
□ TypeScriptエラーが0件
□ 環境変数が適切に設定されている
```

## 次回セッション引き継ぎテンプレート

### 引き継ぎ情報の標準化
```
次回のAIセッション開始時に使用するテンプレート：

---
前回セッションの続きから開発を進めます。

【プロジェクト】[プロジェクト名]
【前回完了項目】
- [完了した機能リスト]

【今回の開始状況】
- [現在の状況]
- [残っている課題]

【今回の目標】
- [今回完了したい項目]

添付のリファレンスドキュメントを確認し、
前回からの継続として開発を進めてください。
---
```

## 効率化のベストプラクティス

### 効果的な指示の出し方
- **具体的な要求**: 抽象的な指示は避け、具体的な実装要求を明示
- **期待値の明確化**: 実装後の期待する動作を明確に記述
- **制約条件の提示**: 使用する技術、パターン、品質基準を明示

### 開発効率を高める工夫
- **テンプレート化**: 頻繁に使用する指示をテンプレート化
- **チェックリスト活用**: 品質確認や完了基準をチェックリスト化
- **段階的アプローチ**: 大きな機能を小さな単位に分割して実装

## 注意事項

### 避けるべき指示パターン
- 一度に複数の大きな機能を要求する
- 曖昧で解釈の余地が大きい指示
- 品質基準を明示しない実装要求

### 推奨する指示パターン
- 一つの機能に集中した明確な要求
- 期待する結果の具体的な記述
- 参照すべきドキュメントやルールの明示
