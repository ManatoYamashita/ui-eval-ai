---
description: gitに関する運用ルール
alwaysApply: false
---
# github.mdc

## Git運用・GitHub管理

### 複数GitHubアカウントの管理

#### SSH設定による使い分け
複数のGitHubアカウント（仕事用・個人用）を使い分ける場合の設定方法：

1. **SSH設定ファイル（~/.ssh/config）の構成**
```
# 仕事用アカウント
Host github.com-work
    HostName github.com
    User git
    IdentityFile ~/.ssh/id_ed25519_work
    IdentitiesOnly yes
    UseKeychain yes
    AddKeysToAgent yes

# 個人用アカウント
Host github.com-private
    HostName github.com
    User git
    IdentityFile ~/.ssh/id_ed25519_private
    IdentitiesOnly yes
    UseKeychain yes
    AddKeysToAgent yes

# デフォルト設定
Host github.com
    HostName github.com
    User git
    IdentityFile ~/.ssh/id_ed25519_work
    IdentitiesOnly yes
    UseKeychain yes
    AddKeysToAgent yes
```

2. **リポジトリごとの設定方法**

個人用アカウントでクローン：
```bash
git clone git@github.com-private:ManatoYamashita/repo-name.git
```

既存リポジトリの切り替え：
```bash
git remote set-url origin git@github.com-private:ManatoYamashita/repo-name.git
```

3. **明示的なSSH鍵指定によるプッシュ**
```bash
GIT_SSH_COMMAND="ssh -i ~/.ssh/id_ed25519_private" git push
```

4. **便利なエイリアス設定（~/.gitconfig）**
```bash
[alias]
    push-private = !GIT_SSH_COMMAND='ssh -i ~/.ssh/id_ed25519_private' git push
    push-work = !GIT_SSH_COMMAND='ssh -i ~/.ssh/id_ed25519_work' git push
```

### トラブルシューティング

#### SSH接続の確認
```bash
# 個人用アカウントの確認
ssh -T git@github.com-private

# 仕事用アカウントの確認
ssh -T git@github.com-work
```

#### DNS解決エラーの対処
`ssh: Could not resolve hostname github.com-private`エラーが出る場合：
1. 標準のgithub.comを使用
2. GIT_SSH_COMMANDで明示的に鍵を指定

### コミット設定

#### リポジトリごとの設定
```bash
# 個人用リポジトリ
git config user.name "ManatoYamashita"
git config user.email "info@manapuraza.com"

# 仕事用リポジトリ
git config user.name "Manato Yamashita (Work)"
git config user.email "work@example.com"
```

### GitHub MCPを使用したIssue管理

#### Issue作成・管理の必須ルール
**大きなタスクの開始時は必ずIssueを作成し、完了時はcloseする**

1. **Issue作成（必須）**: 複雑なタスク・機能実装・修正の開始時
2. **定期的な進捗更新**: 実装の進行に応じてコメントで進捗を記録
3. **完了時のclose（必須）**: タスク完了と同時に最終結果を記録してIssueをclose

#### Issue作成時のPDCAサイクル
1. **PLAN**: 実装計画をIssueに記載
2. **DO**: 実装進捗をコメントで更新
3. **CHECK**: PRでレビュー実施
4. **ACTION**: 知見をルールファイルに反映、Issueをclose

#### GitHub操作のフォールバック戦略

**優先順位1: GitHub MCP使用**
- GitHub MCPが利用可能な場合は、MCPを優先して使用

**優先順位2: GitHub CLI使用**
GitHub MCPが使用できない場合は、GitHub CLIを代替手段として使用：

```bash
# GitHub CLIの認証確認
gh auth status

# 認証が必要な場合
gh auth login --git-protocol ssh --hostname github.com

# 環境変数を使用したトークン認証（対話式を避ける場合）
GITHUB_TOKEN=your_token gh issue create --title "タイトル" --body "詳細"

# Issue一覧
gh issue list

# Issue作成
gh issue create --title "タイトル" --body "詳細"

# Issue更新（コメント追加）
gh issue comment [issue_number] --body "進捗コメント"

# Issue完了
gh issue close [issue_number] --comment "完了コメント"

# PR作成
gh pr create --title "タイトル" --body "詳細"
```

**優先順位3: Web UI案内**
両方が使用できない場合は、ユーザーにGitHub Web UIでの手動操作を案内

### ブランチ戦略

#### 基本ブランチ
- `main`: 本番環境相当
- `develop`: 開発用統合ブランチ（必要に応じて）

#### 機能ブランチ命名規則
- `feature/機能名`: 新機能開発
- `fix/バグ名`: バグ修正
- `refactor/対象`: リファクタリング
- `docs/内容`: ドキュメント更新

### リリースフロー

1. 機能ブランチで開発
2. PRを作成してレビュー
3. mainブランチにマージ
4. タグ付けしてリリース

```bash
# タグ作成
git tag -a v1.0.0 -m "Release version 1.0.0"
git push origin v1.0.0
```# github.mdc

## Git運用・GitHub管理

### 複数GitHubアカウントの管理

#### SSH設定による使い分け
複数のGitHubアカウント（仕事用・個人用）を使い分ける場合の設定方法：

1. **SSH設定ファイル（~/.ssh/config）の構成**
```
# 仕事用アカウント
Host github.com-work
    HostName github.com
    User git
    IdentityFile ~/.ssh/id_ed25519_work
    IdentitiesOnly yes
    UseKeychain yes
    AddKeysToAgent yes

# 個人用アカウント
Host github.com-private
    HostName github.com
    User git
    IdentityFile ~/.ssh/id_ed25519_private
    IdentitiesOnly yes
    UseKeychain yes
    AddKeysToAgent yes

# デフォルト設定
Host github.com
    HostName github.com
    User git
    IdentityFile ~/.ssh/id_ed25519_work
    IdentitiesOnly yes
    UseKeychain yes
    AddKeysToAgent yes
```

2. **リポジトリごとの設定方法**

個人用アカウントでクローン：
```bash
git clone git@github.com-private:ManatoYamashita/repo-name.git
```

既存リポジトリの切り替え：
```bash
git remote set-url origin git@github.com-private:ManatoYamashita/repo-name.git
```

3. **明示的なSSH鍵指定によるプッシュ**
```bash
GIT_SSH_COMMAND="ssh -i ~/.ssh/id_ed25519_private" git push
```

4. **便利なエイリアス設定（~/.gitconfig）**
```bash
[alias]
    push-private = !GIT_SSH_COMMAND='ssh -i ~/.ssh/id_ed25519_private' git push
    push-work = !GIT_SSH_COMMAND='ssh -i ~/.ssh/id_ed25519_work' git push
```

### トラブルシューティング

#### SSH接続の確認
```bash
# 個人用アカウントの確認
ssh -T git@github.com-private

# 仕事用アカウントの確認
ssh -T git@github.com-work
```

#### DNS解決エラーの対処
`ssh: Could not resolve hostname github.com-private`エラーが出る場合：
1. 標準のgithub.comを使用
2. GIT_SSH_COMMANDで明示的に鍵を指定

### コミット設定

#### リポジトリごとの設定
```bash
# 個人用リポジトリ
git config user.name "ManatoYamashita"
git config user.email "info@manapuraza.com"

# 仕事用リポジトリ
git config user.name "Manato Yamashita (Work)"
git config user.email "work@example.com"
```

### GitHub MCPを使用したIssue管理

#### Issue作成・管理の必須ルール
**大きなタスクの開始時は必ずIssueを作成し、完了時はcloseする**

1. **Issue作成（必須）**: 複雑なタスク・機能実装・修正の開始時
2. **定期的な進捗更新**: 実装の進行に応じてコメントで進捗を記録
3. **完了時のclose（必須）**: タスク完了と同時に最終結果を記録してIssueをclose

#### Issue作成時のPDCAサイクル
1. **PLAN**: 実装計画をIssueに記載
2. **DO**: 実装進捗をコメントで更新
3. **CHECK**: PRでレビュー実施
4. **ACTION**: 知見をルールファイルに反映、Issueをclose

#### GitHub操作のフォールバック戦略

**優先順位1: GitHub MCP使用**
- GitHub MCPが利用可能な場合は、MCPを優先して使用

**優先順位2: GitHub CLI使用**
GitHub MCPが使用できない場合は、GitHub CLIを代替手段として使用：

```bash
# GitHub CLIの認証確認
gh auth status

# 認証が必要な場合
gh auth login --git-protocol ssh --hostname github.com

# 環境変数を使用したトークン認証（対話式を避ける場合）
GITHUB_TOKEN=your_token gh issue create --title "タイトル" --body "詳細"

# Issue一覧
gh issue list

# Issue作成
gh issue create --title "タイトル" --body "詳細"

# Issue更新（コメント追加）
gh issue comment [issue_number] --body "進捗コメント"

# Issue完了
gh issue close [issue_number] --comment "完了コメント"

# PR作成
gh pr create --title "タイトル" --body "詳細"
```

**優先順位3: Web UI案内**
両方が使用できない場合は、ユーザーにGitHub Web UIでの手動操作を案内

### ブランチ戦略

#### 基本ブランチ
- `main`: 本番環境相当
- `develop`: 開発用統合ブランチ（必要に応じて）

#### 機能ブランチ命名規則
- `feature/機能名`: 新機能開発
- `fix/バグ名`: バグ修正
- `refactor/対象`: リファクタリング
- `docs/内容`: ドキュメント更新

### リリースフロー

1. 機能ブランチで開発
2. PRを作成してレビュー
3. mainブランチにマージ
4. タグ付けしてリリース

```bash
# タグ作成
git tag -a v1.0.0 -m "Release version 1.0.0"
git push origin v1.0.0
```