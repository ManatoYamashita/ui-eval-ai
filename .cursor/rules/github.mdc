---
description: GitHub MCPを使用したIssue管理とチケット運用のベストプラクティス
globs: 
alwaysApply: false
---

# GitHub MCP Issue管理ルール

## 基本方針
GitHub MCPを活用して、AIとユーザが進捗を把握しやすいチケット管理を実現する

## Issue作成ルール

### 新規Issue作成時
```javascript
// 機能開発の場合
create_issue({
  title: "[FEATURE] 簡潔な機能名",
  body: "## 目的\n実装する機能の目的\n\n## 要件\n- [ ] 要件1\n- [ ] 要件2\n\n## 完了条件\n- [ ] 実装完了\n- [ ] テスト完了",
  labels: ["type:feature", "priority:medium"]
})

// バグ修正の場合
create_issue({
  title: "[FIX] 問題の簡潔な説明",
  body: "## 問題\n発生している問題\n\n## 原因\n想定される原因\n\n## 解決策\n修正方針",
  labels: ["type:fix", "priority:high"]
})
```

### 必須ラベル
- **type**: `feature`, `fix`, `improvement`, `docs`
- **priority**: `high`, `medium`, `low`

## 進捗管理ルール

### 作業開始時
```javascript
add_issue_comment({
  body: "## 🚀 作業開始\n\n### 実装方針\n- 実装アプローチ\n- 使用技術・ライブラリ\n\n### 予定スケジュール\n- [ ] 設計・実装\n- [ ] テスト\n- [ ] レビュー"
})
```

### 進捗報告（定期）
```javascript
add_issue_comment({
  body: "## 📊 進捗報告\n\n### 完了\n- [x] 実装項目1\n\n### 作業中\n- [ ] 実装項目2\n\n### 課題・ブロッカー\n- 発見した問題点\n- 解決が必要な事項"
})
```

### 完了報告
```javascript
add_issue_comment({
  body: "## ✅ 完了報告\n\n### 実装内容\n- 実装した機能の概要\n\n### テスト結果\n- [ ] 単体テスト: PASS\n- [ ] 統合テスト: PASS\n\n### 知見・改善点\n- 今回得られた知見\n- 次回への改善提案"
})

// Issue完了
update_issue({
  state: "closed",
  labels: ["status:completed"]
})
```

## ブランチ・コミット連携

### ブランチ命名
```
feature/issue-{番号}-{概要}
fix/issue-{番号}-{概要}
```

### コミットメッセージ
```
{TYPE}: {概要} (#{issue番号})

例:
FEATURE: ユーザープロフィール表示機能を追加 (#123)
FIX: ログイン時のバリデーションエラーを修正 (#456)
```

## 自動化ルール

### Issue作成のトリガー
- 新機能の実装開始時
- バグ発見時
- 改善提案時

### コメント追加のタイミング
- 作業開始時（方針・計画）
- 進捗報告時（週1回程度）
- 問題発生時（ブロッカー報告）
- 完了時（結果・知見）

### Issue完了の条件
- 実装完了
- テスト完了
- レビュー完了（必要に応じて）
- 知見の文書化完了

## 効率化のベストプラクティス

### テンプレート活用
事前に定義したテンプレートを使用して、一貫性のあるIssue管理を実現

### ラベル活用
適切なラベルを付与することで、Issue の検索・フィルタリングを効率化

### 定期レビュー
週次でオープンなIssueをレビューし、優先度や進捗を確認

## 知見蓄積ルール

### 問題解決時
- 問題の原因と解決策をIssueに記録
- 同様の問題の再発防止策を明記
- 関連するルールファイルへの反映を提案

### 成功事例
- 効果的だった手法をIssueに記録
- 他のタスクでも活用できる汎用的な知見を抽出
- プロセス改善につながるアイデアを提案