---
alwaysApply: false
---
# implementation.mdc

## 実装の基本方針

### PDCAサイクルによる開発プロセス
**重要**: Doから始めると大抵の場合破綻する。必ずPLANフェーズから開始すること。

#### PLAN（計画）フェーズ - コードを書く前に必須
- **Issue作成（必須）**: 大きなタスクの開始時は必ずGitHub MCPを使用してIssueを作成し、工程全体を管理
- **機能定義**: 実装する機能の目的と要件を明確化
- **方針設定**: アーキテクチャパターン、使用技術の選定
- **ToDo作成**: 方針からToDoを作成し、実装の準備
- **テストケース定義**（必要な場合）: 期待する動作と検証項目の事前定義

#### DO（実行）フェーズ - 実装
- PLANで定義した設計とToDoに基づく実装
- 小さな単位での継続的なコミット
- 実装のたびにToDoを修正・更新
- **Issue進捗更新**: 実装の進捗に応じてGitHub MCPを使用してIssueにコメント追加
- テスト実装も並行して実施（あれば）

#### CHECK（評価）フェーズ - 検証
- テストコードの実行と計画との照合
- 動作確認と品質チェック
- パフォーマンス・セキュリティ確認

#### ACTION（改善）フェーズ - 改善
- 計画の改組とルールの改善
- 知見の蓄積とルール更新
- 次回開発への反映事項整理
- **Issue完了処理（必須）**: タスク完了時はGitHub MCPを使用してIssueに最終結果を記録し、Issueをcloseする

## AI分析パイプライン

### コアシステム設計
アプリケーションの中核となる機能は、以下のパイプライン設計原則に従って実装する：

1. **入力前処理**: ユーザーからの入力データは、常にAI処理に適した形式に前処理・最適化
2. **要素識別**: AIを用いて、入力データから重要な構成要素や特徴を正確に識別
3. **知識適用**: 識別された情報に基づき、関連する知識ベースから情報を検索・適用し、AIの推論を補強
4. **構造化出力生成**: AIモデルからの出力は、常に明確で構造化された形式で、後続の処理やユーザーへの表示に適応
5. **フィードバック生成**: AIが分析を実行し、具体的な改善提案や関連する情報を含む形で結果を出力

## TypeScript標準

### 基本原則
コードの品質、可読性、保守性を確保するため、TypeScriptの使用において以下のルールを厳守する：

- **厳密な型安全性**: TypeScriptのコンパイラオプションは常に厳密な設定（strict mode）を有効にし、型関連のエラーを未然に防ぐ
- **`any` 型の禁止**: 特段の正当な理由がない限り、`any` 型の使用は禁止。不明な型や動的なデータ構造には、より具体的な型（`unknown`、`Record<string, unknown>`など）や、適切なインターフェース/型エイリアスを定義
- **明示的な型定義**: すべての関数、変数、定数には、可能な限り明示的な型定義を付与し、コードの意図とデータフローを明確化
- **インターフェース/型エイリアスの活用**: アプリケーション内の複雑なデータ構造やAPIの契約を明確に定義するため、適切にインターフェースや型エイリアスを使用

### 型定義の例
```typescript
// 良い例: 明示的な型定義
interface AnalysisResult {
  score: number;
  suggestions: string[];
  improvements: Improvement[];
}

interface Improvement {
  category: 'accessibility' | 'usability' | 'design';
  priority: 'high' | 'medium' | 'low';
  description: string;
  reference: string;
}

// 悪い例: any型の使用
// const result: any = await analyzeImage(image);
```

## コーディング標準

### React コンポーネント設計
- **関数コンポーネント**: Reactコンポーネントは、Hooksを活用した関数コンポーネントとして実装
- **単一責任の原則**: 各コンポーネントは1つの責任のみを持つ
- **再利用性**: 再利用可能なコンポーネント設計を重視
- **疎結合性**: コンポーネント間の依存関係を最小限に抑える
- **Atomic Design**: 必要に応じてAtomic Designパターンを適用

### API設計原則
APIエンドポイントは、以下のパターンに従って構築する：

1. **入力検証**: すべてのAPIリクエストは、セキュリティとデータ整合性を確保するため、厳密な入力検証を実行
2. **ロジックの分離**: APIハンドラは、リクエストの受け付けとレスポンスの整形に徹し、ビジネスロジックはサービスレイヤーやヘルパー関数として明確に分離
3. **構造化レスポンス**: APIレスポンスは、成功・失敗に関わらず、予測可能で一貫性のある構造化された形式（JSON）を使用

### API レスポンス例
```typescript
// 成功レスポンス
{
  "success": true,
  "data": {
    "analysis": AnalysisResult,
    "processingTime": number
  }
}

// エラーレスポンス
{
  "success": false,
  "error": {
    "code": "VALIDATION_ERROR",
    "message": "入力データが無効です",
    "details": string[]
  }
}
```

### エラーハンドリング標準
すべての非同期処理には**try-catchブロック**を必ず設け、適切なエラー処理を実装する：

- **ユーザーフレンドリーなメッセージ**: エンドユーザーには、理解しやすく、行動を促すようなエラーメッセージを提供
- **詳細なログ**: デバッグや問題追跡のため、サーバーサイドで詳細なエラー情報（スタックトレースなど）をログに出力
- **適切なHTTPステータスコード**: APIは、エラーの種類に応じて適切なHTTPステータスコード（400 Bad Request, 404 Not Found, 500 Internal Server Error）を返す

### エラーハンドリング例
```typescript
// 良い例: 適切なエラーハンドリング
async function analyzeImage(imageFile: File): Promise<AnalysisResult> {
  try {
    const processedImage = await preprocessImage(imageFile);
    const analysis = await callAIService(processedImage);
    return structureAnalysisResult(analysis);
  } catch (error) {
    console.error('画像分析エラー:', error);
    
    if (error instanceof ValidationError) {
      throw new Error('画像ファイルの形式が無効です');
    }
    if (error instanceof AIServiceError) {
      throw new Error('分析サービスが一時的に利用できません');
    }
    
    throw new Error('予期しないエラーが発生しました');
  }
}
```

## テスト標準

### テスト実施方針
- **単体テスト**: 個々の関数、コンポーネント、モジュールが期待通りに動作することを検証
- **結合テスト**: 複数のモジュールやシステム間の連携が正しく機能することを確認
- **テストカバレッジ**: 重要なビジネスロジックは80%以上のカバレッジを目指す

### テストファイル命名
```
// コンポーネントテスト
components/
├── Button.tsx
└── Button.test.tsx

// ユーティリティテスト
lib/
├── ai-analysis.ts
└── ai-analysis.test.ts
```

## 継続的改善のプロセス

### 知見蓄積のルール
- 解決した技術的課題は必ずこのファイルまたは他のルールファイルに追記
- 新しいベストプラクティスの発見時は該当セクションを更新
- 失敗事例も含めて記録し、同じ問題の再発を防止
