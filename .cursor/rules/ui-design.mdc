---
alwaysApply: false
---
# ui-design.mdc

## UI/UX設計標準

### 基本設計原則
ユーザーエクスペリエンスの質を確保するための普遍的な指針。日本のデジタル庁およびVercel社が公開しているデザインシステムを参照し、**シンプルで美しく、かつ高いカスタマイズ性を持つソリューション**を提供する。

### スタイリング標準
- **ユーティリティファースト/コンポーネントベース**: スタイリングには、TailwindCSSのようなユーティリティファーストのアプローチ、または再利用可能なコンポーネントシステムを基本とし、一貫性と効率性を促進
- **レスポンシブデザイン**: すべてのUIは、モバイルからデスクトップまで多様なデバイスと画面サイズに対応する**モバイルファーストのレスポンシブデザイン**を基本とする
- **ローディング状態の明示**: データフェッチや長時間かかる処理には、ユーザーがシステムの応答を待っていることを明確に伝えるための**ローディング状態**（スピナー、プログレスバーなど）を必ず表示

### デザインシステム
- **カラーパレット**: 一貫性のあるカラーシステムを使用
- **タイポグラフィ**: 読みやすく階層的なフォントシステム
- **スペーシング**: 規則的な余白とパディングシステム
- **コンポーネントライブラリ**: 再利用可能なUIコンポーネントの体系的管理

### インタラクション設計
- **直感的な操作**: ユーザーが迷わずに操作できるインターフェース
- **フィードバック**: ユーザーの操作に対する明確な反応
- **エラー防止**: 操作ミスを防ぐための適切なガイド
- **効率性**: 最小限の操作でタスクを完了できる設計

## アクセシビリティ標準

### 基本原則
すべてのユーザーがアプリケーションを快適に利用できるよう、アクセシビリティを最優先事項とし、WCAGなどの国際的なガイドラインに準拠する。

### セマンティクス
- **セマンティックHTMLとARIAラベル**: スクリーンリーダーを含む支援技術の利用者がアプリケーションを正しく理解できるよう、**セマンティックなHTML要素**を適切に使用し、必要に応じて**ARIAラベル**を付与
- **見出し構造**: 論理的な見出し階層（h1, h2, h3...）を維持
- **ランドマーク**: main, nav, aside, footer などのランドマーク要素を適切に使用

### 操作性
- **十分なタッチターゲットサイズ**: クリック可能またはタップ可能な要素（ボタン、リンクなど）は、誤操作を防ぎ、モバイルデバイスでの操作性を向上させるために**十分なタッチターゲットサイズ**を確保（推奨44px × 44px以上）
- **キーボードナビゲーションのサポート**: マウスを使用しないユーザー（キーボード操作のみのユーザーや支援技術利用者）がアプリケーションのすべてのインタラクティブ要素を操作できるよう、**完全なキーボードナビゲーション**をサポート。フォーカス管理も適切に実行

### 視覚的アクセシビリティ
- **適切なコントラスト比**: テキストと背景色のコントラスト比は、弱視のユーザーでも読みやすいよう、WCAGの基準（例: 通常テキスト 4.5:1、大きなテキスト 3:1）に厳密に準拠
- **フォーカスインジケーター**: キーボードフォーカスが視覚的に明確に識別できる
- **色に依存しない情報伝達**: 色覚異常のユーザーにも配慮し、色のみに依存しない情報伝達

### 実装例
```typescript
// 良い例: アクセシブルなボタンコンポーネント
interface AccessibleButtonProps {
  children: React.ReactNode;
  onClick: () => void;
  disabled?: boolean;
  ariaLabel?: string;
  type?: 'button' | 'submit' | 'reset';
}

const AccessibleButton: React.FC<AccessibleButtonProps> = ({
  children,
  onClick,
  disabled = false,
  ariaLabel,
  type = 'button'
}) => {
  return (
    <button
      type={type}
      onClick={onClick}
      disabled={disabled}
      aria-label={ariaLabel}
      className="
        min-h-[44px] min-w-[44px] 
        px-4 py-2 
        bg-blue-600 text-white 
        rounded-md 
        hover:bg-blue-700 
        focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2
        disabled:opacity-50 disabled:cursor-not-allowed
        transition-colors duration-200
      "
    >
      {children}
    </button>
  );
};
```

## レスポンシブデザイン

### ブレークポイント
TailwindCSSのブレークポイントに準拠：
- **sm**: 640px以上
- **md**: 768px以上  
- **lg**: 1024px以上
- **xl**: 1280px以上
- **2xl**: 1536px以上

### モバイルファースト設計
- デフォルトはモバイル向けスタイル
- 画面サイズが大きくなるにつれて段階的にスタイルを追加
- タッチ操作を前提とした設計

### グリッドシステム
- Flexbox・CSS Gridを活用した柔軟なレイアウト
- コンテンツに応じた適応的なグリッド設計
- 一貫性のあるスペーシングシステム

## パフォーマンス最適化

### 画像最適化
- Next.js Image コンポーネントの使用
- WebP/AVIF形式への対応
- 適切なサイズ設定とlazy loading

### CSSの最適化
- TailwindCSSのpurge機能を活用
- 不要なスタイルの削除
- Critical CSS の実装

### アニメーション
- 60fps を維持するスムーズなアニメーション
- `transform` と `opacity` プロパティの優先使用
- `prefers-reduced-motion` への対応

## 実装チェックリスト

### 基本要件
- [ ] セマンティックHTMLの使用
- [ ] 適切なARIAラベルの付与
- [ ] キーボードナビゲーションのサポート
- [ ] 適切なコントラスト比の確保
- [ ] 十分なタッチターゲットサイズ

### レスポンシブ対応
- [ ] モバイルファーストの設計
- [ ] 全ブレークポイントでの動作確認
- [ ] タッチ操作とマウス操作の両方に対応

### パフォーマンス
- [ ] 画像の最適化
- [ ] CSSの最適化
- [ ] アニメーションの最適化
- [ ] ローディング状態の実装
